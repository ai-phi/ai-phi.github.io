---
import { LOGO_IMAGE, SITE } from "@config";
import Hr from "./Hr.astro";
import LinkButton from "./LinkButton.astro";
import StyledTitle from "@components/StyledTitle";

export interface Props {
  activeNav?: "home" | "posts" | "tags" | "glossary" | "about" | "agenda" | "search" | "resources";
}

const { activeNav } = Astro.props;
---

<header>
  <a id="skip-to-content" href="#main-content">Skip to content</a>
  <div class="nav-container">
    <div class="top-nav-wrap">
      <a href="/" class="nav-logo whitespace-nowrap">
        <div class="logo-container">
          <!-- Ghost logo for subtle effect -->
          <img
            src="/src/assets/images/site-images/AiPhi_Logo_Black_2lines.png"
            alt=""
            class="nav-ghost-logo nav-light-ghost"
            z-index: 1;
          />
          <img
            src="/src/assets/images/site-images/AiPhi_Logo_White_2lines.png"
            alt=""
            class="nav-ghost-logo nav-dark-ghost"
            z-index: 1;
          />

          <img
            src="/src/assets/images/site-images/AiPhi_Logo_Black_2lines.png"
            alt={SITE.title}
            class="nav-logo-image nav-light-logo"
            z-index: auto;
          />
          <img
            src="/src/assets/images/site-images/AiPhi_Logo_White_2lines.png"
            alt={SITE.title}
            class="nav-logo-image nav-dark-logo"
            z-index: auto;
          />
        </div>
      </a>
      <nav id="nav-menu">
        <button
          class="hamburger-menu focus-outline"
          aria-label="Open Menu"
          aria-expanded="false"
          aria-controls="menu-items"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="menu-icon"
          >
            <line x1="7" y1="12" x2="21" y2="12" class="line"></line>
            <line x1="3" y1="6" x2="21" y2="6" class="line"></line>
            <line x1="12" y1="18" x2="21" y2="18" class="line"></line>
            <line x1="18" y1="6" x2="6" y2="18" class="close"></line>
            <line x1="6" y1="6" x2="18" y2="18" class="close"></line>
          </svg>
        </button>
        
        <!-- Main navigation items -->
        <ul id="main-nav-items" class="hidden md:flex">
          <li>
            <a href="/" class={activeNav === "home" ? "active" : ""} data-text="Home">
              Home
            </a>
          </li>
          <li class="nav-separator"></li>
          <li>
            <a href="/posts" class={activeNav === "posts" ? "active" : ""} data-text="Posts">
              Posts
            </a>
          </li>
          <li class="nav-separator"></li>
          <li>
            <a href="/resources" class={activeNav === "resources" ? "active" : ""} data-text="Resources">
              Resources
            </a>
          </li>
          <li class="nav-separator"></li>
          <li>
            <a href="/about" class={activeNav === "about" ? "active" : ""} data-text="About">
              About
            </a>
          </li>
        </ul>
        
        <!-- Search and theme toggle -->
        <ul id="nav-actions" class="flex">
          <li>
            <LinkButton
              href="/search"
              className={`focus-outline p-3 sm:p-1 ${
                activeNav === "search" ? "active" : ""
              } flex`}
              ariaLabel="search"
              title="Search"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="scale-125 sm:scale-100"
                ><path
                  d="M19.023 16.977a35.13 35.13 0 0 1-1.367-1.384c-.372-.378-.596-.653-.596-.653l-2.8-1.337A6.962 6.962 0 0 0 16 9c0-3.859-3.14-7-7-7S2 5.141 2 9s3.14 7 7 7c1.763 0 3.37-.66 4.603-1.739l1.337 2.8s.275.224.653.596c.387.363.896.854 1.384 1.367l1.358 1.392.604.646 2.121-2.121-.646-.604c-.379-.372-.885-.866-1.391-1.36zM9 14c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5z"
                ></path>
              </svg>
              <span class="sr-only">Search</span>
            </LinkButton>
          </li>
          <li>
            {
              SITE.lightAndDarkMode && (
                <button
                  id="theme-btn"
                  class="focus-outline"
                  title="Toggles light & dark"
                  aria-label="auto"
                  aria-live="polite"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" id="moon-svg">
                    <path d="M20.742 13.045a8.088 8.088 0 0 1-2.077.271c-2.135 0-4.14-.83-5.646-2.336a8.025 8.025 0 0 1-2.064-7.723A1 1 0 0 0 9.73 2.034a10.014 10.014 0 0 0-4.489 2.582c-3.898 3.898-3.898 10.243 0 14.143a9.937 9.937 0 0 0 7.072 2.93 9.93 9.93 0 0 0 7.07-2.929 10.007 10.007 0 0 0 2.583-4.491 1.001 1.001 0 0 0-1.224-1.224zm-2.772 4.301a7.947 7.947 0 0 1-5.656 2.343 7.953 7.953 0 0 1-5.658-2.344c-3.118-3.119-3.118-8.195 0-11.314a7.923 7.923 0 0 1 2.06-1.483 10.027 10.027 0 0 0 2.89 7.848 9.972 9.972 0 0 0 7.848 2.891 8.036 8.036 0 0 1-1.484 2.059z" />
                  </svg>
                  <svg xmlns="http://www.w3.org/2000/svg" id="sun-svg">
                    <path d="M6.993 12c0 2.761 2.246 5.007 5.007 5.007s5.007-2.246 5.007-5.007S14.761 6.993 12 6.993 6.993 9.239 6.993 12zM12 8.993c1.658 0 3.007 1.349 3.007 3.007S13.658 15.007 12 15.007 8.993 13.658 8.993 12 10.342 8.993 12 8.993zM10.998 19h2v3h-2zm0-17h2v3h-2zm-9 9h3v2h-3zm17 0h3v2h-3zM4.219 18.363l2.12-2.122 1.415 1.414-2.12 2.122zM16.24 6.344l2.122-2.122 1.414 1.414-2.122 2.122zM6.342 7.759 4.22 5.637l1.415-1.414 2.12 2.122zm13.434 10.605-1.414 1.414-2.122-2.122 1.414-1.414z" />
                  </svg>
                </button>
              )
            }
          </li>
        </ul>
      </nav>
      <div class="header-line"></div>
    </div>
  </div>

</header>

<style>
  #skip-to-content {
    @apply absolute -top-full left-16 z-50 bg-skin-accent px-3 py-2 text-skin-inverted transition-all focus:top-4;
  }
  
  .nav-container {
    @apply mx-auto flex max-w-3xl flex-col items-center justify-between md:flex-row;
    max-width: 58rem;
  }
  
  header {
    position: relative;
    z-index: 40; /* Above mobile menu */
    background: rgb(var(--color-fill));
  }

  .top-nav-wrap {
    @apply relative flex w-full items-start justify-between md:items-center md:pb-8;
    padding-bottom: 1rem;
  }

  .nav-logo {
    @apply absolute py-1 text-xl font-semibold md:static md:text-2xl;
    margin-left: -200px;
    margin-bottom: -40px;
  }
  
  .logo-container {
    @apply relative;
  }
  
  .nav-logo-image {
    @apply h-12 w-auto transition-opacity duration-200;
    height: 4rem; /* Smaller on mobile (64px) */
    padding-top: 10px; /* Reduced padding on mobile */
    
    @media (min-width: 480px) {
      height: 5rem; /* Medium size on small tablets (80px) */
      padding-top: 12px;
    }
    
    @media (min-width: 768px) {
      height: 6rem; /* Larger on tablets (96px) */
      padding-top: 14px;
    }
    
    @media (min-width: 1024px) {
      height: 7rem; /* Original size on desktop (112px) */
      padding-top: 15px;
    }
  }
  
  .nav-light-logo {
    @apply block;
  }
  
  .nav-dark-logo {
    @apply hidden;
  }
  
  /* Dark mode logo switching */
  html[data-theme="dark"] .nav-light-logo {
    @apply hidden;
  }
  
  html[data-theme="dark"] .nav-dark-logo {
    @apply block;
  }
  

  /* Ghost logo styling */
  .nav-ghost-logo {
    @apply absolute w-auto transition-opacity duration-200;
    height: 4rem; /* Match main logo - smaller on mobile */
    opacity: 0;
    pointer-events: none;
    top: 0;
    left: 0;
    padding-top: 10px; /* Match main logo padding */
    z-index: -1;
    
    @media (min-width: 480px) {
      height: 5rem; /* Match main logo scaling */
      padding-top: 12px;
    }
    
    @media (min-width: 768px) {
      height: 6rem; /* Match main logo scaling */
      padding-top: 14px;
    }
    
    @media (min-width: 1024px) {
      height: 7rem; /* Original size on desktop */
      padding-top: 15px;
    }
  }
  
  .nav-ghost-logo.ghost-effect {
    animation: subtleGhost 3s ease-in-out;
  }
  
  .nav-ghost-logo.ghost-effect-2 {
    animation: subtleGhost2 3s ease-in-out;
  }
  
  .nav-light-ghost {
    display: block;
  }
  
  .nav-dark-ghost {
    display: none;
  }
  
  html[data-theme="dark"] .nav-light-ghost {
    display: none;
  }
  
  html[data-theme="dark"] .nav-dark-ghost {
    display: block;
  }
  
  @keyframes subtleGhost {

    0% {
      transform: translate(4px, -3px) rotate(0.5deg) scale(1.012);
      opacity: 0.6;
    }
    10% {
      transform: translate(3px, -4px) rotate(0.3deg) scale(1.03);
      opacity: 0.4;
    }
    20% {
      transform: translate(-3px, 4px) rotate(-0.4deg) scale(0.95);
      opacity: 0.5;
    }
    30% {
      transform: translate(-4px, 3px) rotate(-0.1deg) scale(0.92);
      opacity: 0.6;
    }
    40% {
      transform: translate(3px, -4px) rotate(0.2deg) scale(1.);
      opacity: 0.4;
    }
    50% {
      transform: translate(0px, 4px) rotate(-0.3deg) scale(0.9);
      opacity: 0.3;
    }
    60% {
      transform: translate(4px, -3px) rotate(0.2deg) scale(1.02);
      opacity: 0.2;
    }
    70% {
      transform: translate(-4px, 0px) rotate(-0.5deg) scale(0.94);
      opacity: 0.1;
    }
    90% {
      transform: translate(3px, -4px) rotate(0.5deg) scale(1.02);
      opacity: 0.2;
    }
    100% {
      transform: translate(-2px, 3px) rotate(-0.4deg) scale(0.98);
      opacity: 0.1;
    }
    
  }

  @keyframes subtleGhost2 {
    0% {
      transform: translate(3px, -4px) rotate(-0.3deg) scale(1.008);
      opacity: 0.5;
    }
    15% {
      transform: translate(3px, -3px) rotate(-0.2deg) scale(1.025);
      opacity: 0.6;
    }
    25% {
      transform: translate(4px, -4px) rotate(0.4deg) scale(0.96);
      opacity: 0.4;
    }
    35% {
      transform: translate(3px, -4px) rotate(0.1deg) scale(0.93);
      opacity: 0.5;
    }
    45% {
      transform: translate(4px, -3px) rotate(-0.2deg) scale(1.01);
      opacity: 0.3;
    }
    55% {
      transform: translate(4px, -2px) rotate(0.3deg) scale(0.91);
      opacity: 0.4;
    }
    65% {
      transform: translate(3px, -4px) rotate(-0.2deg) scale(1.015);
      opacity: 0.2;
    }
    75% {
      transform: translate(4px, -3px) rotate(0.4deg) scale(0.95);
      opacity: 0.1;
    }
    85% {
      transform: translate(4px, -4px) rotate(-0.3deg) scale(1.018);
      opacity: 0.2;
    }
    100% {
      transform: translate(3px, -3px) rotate(0.2deg) scale(0.99);
      opacity: 0.1;
    }
  }
  
  
  .hamburger-menu {
    @apply self-end p-2 md:hidden;
    position: relative;
    right: 2%;
    top: 4%;
    z-index: 50; /* Above everything */
    background: rgb(var(--color-fill));
    border-radius: 0.375rem;
    border: 1px solid rgb(var(--color-border));
  }
  .hamburger-menu svg {
    @apply h-6 w-6 scale-125 fill-skin-base;
    right: 2%;
    top: 4%;
  }
  
  .hamburger-menu:hover {
    background: rgb(var(--color-border));
  }

  nav {
    @apply flex w-full flex-col items-center md:ml-2 md:flex-row md:justify-between md:py-0;
  }
  
  /* Main navigation items */
  #main-nav-items {
    @apply mt-4 flex flex-wrap justify-evenly gap-x-6 gap-y-2 md:mt-0 md:flex-1 md:justify-evenly;
    margin-right: 25px;
    
    /* Mobile menu styling - simple dropdown */
    @media (max-width: 767px) {
      position: absolute;
      top: 40%;
      left: 5%;
      right: 0;
      background: rgb(var(--color-fill));
      border: 1px solid rgb(var(--color-border));
      border-radius: 0.5rem;
      padding: 1rem;
      margin-top: 0.5rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      z-index: 40;
      flex-direction: column;
      gap: 1rem;
    }
  }
  
  /* Ensure hidden state works on mobile only */
  @media (max-width: 767px) {
    #main-nav-items.hidden {
      display: none !important;
      top: 40%;
    }
  }
  
  #main-nav-items li {
    @apply relative;
  }
  
  #main-nav-items li a {
    @apply px-2 py-1 text-center font-medium hover:text-skin-accent relative z-10;
    font-family: 'Nunito', sans-serif;
    font-size: 1.2em; /* Smaller on mobile */
    padding: 0px;
    column-gap: 0.5rem;
    
    @media (min-width: 480px) {
      font-size: 1.4em; /* Medium size on small tablets */
      column-gap: 1rem;
    }
    
    @media (min-width: 768px) {
      font-size: 1.6em; /* Larger on tablets */
      column-gap: 1.5rem;
    }
    
    @media (min-width: 1024px) {
      font-size: 1.8em; /* Original size on desktop */
      column-gap: 1.5rem;
    }
  }
  
  /* Active nav styling */
  #main-nav-items li a.active {
    color: rgb(var(--color-accent));
  }
  
  #main-nav-items li.nav-separator {
    @apply text-skin-base;
    font-family: 'Nunito', sans-serif;
    border-right: 4px solid currentColor;
    border-radius: 10%;
    
    @media (max-width: 767px) {
      display: none;
    }
  }
  
  /* Search and theme toggle */
  #nav-actions {
    @apply flex items-center gap-4 md:flex-shrink-0;
    
    @media (max-width: 767px) {
      /* margin-top: 1rem; */
      gap: 0.5rem;
      padding-top: 0.5rem;
    }
    
    @media (min-width: 768px) {
      margin-top: 1rem;
      margin-right: -130px;
    }
  }
  
  
  #nav-actions li {
    @apply flex items-center;
  }
  
  #nav-actions li a {
    @apply w-auto px-2 py-1;
  }
  
  /* nav a.active {
    @apply underline;
  }
  nav a.active svg {
    @apply fill-skin-accent;
  } */

  nav button {
    @apply p-1;
  }
  nav button svg {
    @apply h-6 w-6 fill-skin-base hover:fill-skin-accent;
  }
  #theme-btn {
    @apply p-3 sm:p-1;
  }
  #theme-btn svg {
    @apply scale-125 hover:rotate-12 sm:scale-100;
  }
  
  /* Theme icon switching */
  #sun-svg,
  html[data-theme="dark"] #moon-svg {
    display: none;
  }
  
  #moon-svg,
  html[data-theme="dark"] #sun-svg {
    display: block;
  }

  .menu-icon line {
    @apply transition-opacity duration-75 ease-out;
  }

  .menu-icon .close {
    opacity: 0;
  }

  .menu-icon.is-active .line {
    @apply opacity-0;
  }

  .menu-icon.is-active .close {
    @apply opacity-100;
  }
  
  .header-line {
    @apply h-px bg-skin-inverted;
    width: 100%; /* Full width on mobile */
    height: 5px;
    position: absolute;
    justify-content: right;
    margin-top: 48px;
    
    /* Responsive width scaling */
    @media (min-width: 480px) {
      width: 90%; /* Slightly narrower on small screens */
    }
    
    @media (min-width: 640px) {
      width: 100%; /* Medium width on tablets */
    }
    
    @media (min-width: 768px) {
      width: 100%; /* Narrower on larger tablets */
    }
    
    @media (min-width: 1024px) {
      width: 100%; /* Original fixed width on desktop */
    }
  }

</style>

<script>
  function toggleNav() {
    // Toggle menu
    const menuBtn = document.querySelector(".hamburger-menu");
    const menuIcon = document.querySelector(".menu-icon");
    const mainNavItems = document.querySelector("#main-nav-items");

    menuBtn?.addEventListener("click", () => {
      const menuExpanded = menuBtn.getAttribute("aria-expanded") === "true";
      menuIcon?.classList.toggle("is-active");
      menuBtn.setAttribute("aria-expanded", menuExpanded ? "false" : "true");
      menuBtn.setAttribute(
        "aria-label",
        menuExpanded ? "Open Menu" : "Close Menu"
      );
      mainNavItems?.classList.toggle("hidden");
    });
  }

  toggleNav();

  // Runs on view transitions navigation
  document.addEventListener("astro:after-swap", toggleNav);

  function toggleTheme() {
    const themeBtn = document.querySelector("#theme-btn");
    
    themeBtn?.addEventListener("click", () => {
      const currentTheme = document.documentElement.getAttribute("data-theme");
      const newTheme = currentTheme === "dark" ? "light" : "dark";
      
      document.documentElement.setAttribute("data-theme", newTheme);
      localStorage.setItem("theme", newTheme);
      
      // Update aria-label
      themeBtn.setAttribute("aria-label", `Switch to ${currentTheme} mode`);
    });
  }

  function initializeTheme() {
    // Check for saved theme preference or default to light mode
    const savedTheme = localStorage.getItem("theme") || "light";
    document.documentElement.setAttribute("data-theme", savedTheme);
  }

  // Initialize theme on page load
  initializeTheme();
  toggleTheme();

  // Runs on view transitions navigation
  document.addEventListener("astro:after-swap", () => {
    initializeTheme();
    toggleTheme();
  });

   
  const colors_hue_rotate = [
    'invert(27%) sepia(82%) saturate(5724%) hue-rotate(4deg) brightness(103%) contrast(104%)', //YELLOW
    'invert(8%) sepia(100%) saturate(7103%) hue-rotate(201deg) brightness(105%) contrast(139%)', //BLUE
    'invert(94%) sepia(83%) saturate(1543%) hue-rotate(20deg) brightness(52%) contrast(101%)', //RED
  ];

  // Subtle ghost effect with random colors and dual animations
  function triggerGhostEffect() {
    const lightGhost = document.querySelector('.nav-light-ghost');
    const darkGhost = document.querySelector('.nav-dark-ghost');
    
    if (lightGhost && darkGhost) {
      // Choose two different random colors
      let color1 = colors_hue_rotate[Math.floor(Math.random() * colors_hue_rotate.length)];
      let color2 = colors_hue_rotate[Math.floor(Math.random() * colors_hue_rotate.length)];
      
      // Ensure colors are different
      while (color1 === color2) {
        color2 = colors_hue_rotate[Math.floor(Math.random() * colors_hue_rotate.length)];
      }
      
      // Create first ghost object (clone)
      const ghost1Light = lightGhost.cloneNode(true);
      const ghost1Dark = darkGhost.cloneNode(true);
      
      // Create second ghost object (clone)
      const ghost2Light = lightGhost.cloneNode(true);
      const ghost2Dark = darkGhost.cloneNode(true);
      
      // Position the ghost objects
      ghost1Light.style.position = 'absolute';
      ghost1Light.style.top = '0';
      ghost1Light.style.left = '0';
      ghost1Light.style.zIndex = '-2';
      
      ghost1Dark.style.position = 'absolute';
      ghost1Dark.style.top = '0';
      ghost1Dark.style.left = '0';
      ghost1Dark.style.zIndex = '-2';
      
      ghost2Light.style.position = 'absolute';
      ghost2Light.style.top = '0';
      ghost2Light.style.left = '0';
      ghost2Light.style.zIndex = '-3';
      
      ghost2Dark.style.position = 'absolute';
      ghost2Dark.style.top = '0';
      ghost2Dark.style.left = '0';
      ghost2Dark.style.zIndex = '-3';
      
      // Apply colors
      ghost1Light.style.filter = color1;
      ghost1Dark.style.filter = 'brightness(0) saturate(100%) ' + color1;
      ghost2Light.style.filter = color2;
      ghost2Dark.style.filter = 'brightness(0) saturate(100%) ' + color2;
      
      // Add to DOM
      lightGhost.parentNode.appendChild(ghost1Light);
      lightGhost.parentNode.appendChild(ghost1Dark);
      lightGhost.parentNode.appendChild(ghost2Light);
      lightGhost.parentNode.appendChild(ghost2Dark);
      
      // Apply animations
      ghost1Light.classList.add('ghost-effect');
      ghost1Dark.classList.add('ghost-effect');
      ghost2Light.classList.add('ghost-effect-2');
      ghost2Dark.classList.add('ghost-effect-2');
      
      // Remove ghost objects after animation completes
      setTimeout(() => {
        ghost1Light.remove();
        ghost1Dark.remove();
        ghost2Light.remove();
        ghost2Dark.remove();
      }, 3000); // Animation duration is 3 seconds
    }
  }
  
  function scheduleGhostEffect() {
    // Random delay around 60 seconds (once per minute)
    const minDelay = 55000; // 55 seconds
    const maxDelay = 65000; // 65 seconds
    const delay = Math.random() * (maxDelay - minDelay) + minDelay;
    
    setTimeout(() => {
      triggerGhostEffect();
      scheduleGhostEffect(); // Schedule the next one
    }, delay);
  }
  
  // Start the ghost effect cycle
  document.addEventListener('DOMContentLoaded', () => {
    // Initial delay before first ghost effect
    setTimeout(scheduleGhostEffect, 60000); // Start after 60 seconds
    
    // Add click event listener to logo container
    const logoContainer = document.querySelector('.logo-container');
    const logoLink = document.querySelector('.nav-logo');
    
    if (logoContainer && logoLink) {
      logoLink.addEventListener('click', (e) => {
        // Prevent default link behavior
        e.preventDefault();
        // Trigger ghost effect
        triggerGhostEffect();
      });
    }
  });
  
  // Re-setup on view transitions
  document.addEventListener('astro:after-swap', () => {
    scheduleGhostEffect();
    
    // Re-add click event listener after view transitions
    const logoContainer = document.querySelector('.logo-container');
    const logoLink = document.querySelector('.nav-logo');
    
    if (logoContainer && logoLink) {
      logoLink.addEventListener('click', (e) => {
        // Prevent default link behavior
        e.preventDefault();
        // Trigger ghost effect
        triggerGhostEffect();
      });
    }
  });
</script>

