---
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import LinkButton from "@components/LinkButton.astro";
import Hr from "@components/Hr.astro";
import Card from "@components/Card";
import Socials from "@components/Socials.astro";
import getSortedPosts from "@utils/getSortedPosts";
import { SOCIALS } from "@config";
import RSSIcon from "@components/RSSIcon";
import RandomGlossaryWords from "@components/RandomGlossaryWords";
import StyledTitle from "@components/StyledTitle";

const posts = await getCollection("blog");

const sortedPosts = getSortedPosts(posts);
const featuredPosts = sortedPosts.filter(({ data }) => data.featured);
const nextSessionPost = sortedPosts.filter(({ data }) => data.nextSession);
const nextFormal = sortedPosts
  .filter(({ data }) => data.nextFormal)
  .sort(
      (a, b) =>
        Math.floor(
          new Date(a.data.pubDatetime).getTime() / 1000
        ) -
        Math.floor(
          new Date(b.data.pubDatetime).getTime() / 1000
        )
    );

const socialCount = SOCIALS.filter(social => social.active).length;
---

<Layout>
  <Header activeNav="home" />
  <main class="font-serif" id="main-content">
    <section id="hero" class="hero-section">
      <div class="hero-content">
        <!-- Logo positioned to float and allow text wrapping -->
        <div class="logo-container">
          <!-- Ring logos for background rotation -->
          <img
            src="/images/AiPhi_Logo_Black_Variante_Ring.png"
            alt=""
            class="hero-ring-logo light-ring"
          />
          <img
            src="/images/AiPhi_Logo_White_Variante_Ring.png"
            alt=""
            class="hero-ring-logo dark-ring"
          />
          
          <img
            src="/images/AiPhi_Logo_Black_Variante.png"
            alt="AI-PHI Logo"
            class="hero-logo light-logo"
          />
          <img
            src="/images/AiPhi_Logo_White_Variante.png"
            alt="AI-PHI Logo"
            class="hero-logo dark-logo"
          />
        </div>
        
        <div class="hero-text">
          <h1 class="hero-title">
            AI & Philosophy<br>
            Discussion Group
          </h1>
          <!-- General aspects of AI-PHI -->
          <div class="subtitle-section general-aspects">
            <div class="glitch-container" data-text="Paris">
              <span>Paris</span>
            </div>
            <span class="dot">¬∑</span>
            <div class="glitch-container" data-text="Community">
              <span>Community</span>
            </div>
            <span class="dot">¬∑</span>
            <div class="glitch-container" data-text="Research">
              <span>Research</span>
            </div>
            <span class="dot">¬∑</span>
            <div class="glitch-container" data-text="Interdisciplinary">
              <span>Interdisciplinary</span>
            </div>
            <span class="dot">¬∑</span>
            <div class="glitch-container" data-text="News">
              <span>News</span>
            </div>
            <span class="dot">¬∑</span>
            <div class="glitch-container" data-text="Debates">
              <span>Debate</span>
            </div>

          </div>
          
          <!-- Topics we discuss -->
          <div class="subtitle-section discussion-topics">
            <div class="glitch-container" data-text="Consciousness">
              <span>Consciousness</span>
            </div>
            <span class="dot">¬∑</span>
            <div class="glitch-container" data-text="Regulation">
              <span>Regulation</span>
            </div>
            <span class="dot">¬∑</span>
            <div class="glitch-container" data-text="Ethics">
              <span>Ethics</span>
            </div>
            <span class="dot">¬∑</span>
            <div class="glitch-container" data-text="Emotions">
              <span>Emotions</span>
            </div>
            <span class="dot">¬∑</span>
            <div class="glitch-container" data-text="Reasoning">
              <span>Reasoning</span>
            </div>
            <span class="dot">¬∑</span>
            <div class="glitch-container" data-text="LLM">
              <span>LLM</span>
            </div>
            <span class="dot">¬∑</span>
            <div class="glitch-container" data-text="Agency">
              <span>Agency</span>
            </div>
          </div>
        </div>
      </div>
        <div class="hero-tagline">
          <p>We are a Paris-based community of researchers and professionals at the <span class="tagline-highlight">intersection of AI and Philosophy</span>, trying to <span class="tagline-highlight">track the big ideas</span> that are shaping a rapidly changing world.</p>
        </div>
    </section>

<!-- {
  nextFormal.length > 0 && (
    <>
      <section id="featured">
        <h2>Upcoming Seminar Series </h2>
        <div class="section-header-line"></div>
        <ul>
          {nextFormal.map(({ data, slug }) => (
            <Card
              href={`/posts/${slug}`}
              frontmatter={data}
              secHeading={false}
            />
          ))}
        </ul>
      </section>
    </>
  )
} -->

<!-- {
  nextSessionPost.length > 0 && (
    <>
      <section id="featured">
        <h2>‚≠ê Upcoming Community Session</h2>
        <ul>
          {nextSessionPost.map(({ data, slug }) => (
            <Card
              href={`/posts/${slug}`}
              frontmatter={data}
              secHeading={false}
            />
          ))}
        </ul>
      </section>
      <Hr />
    </>
  )
}  -->

    <!-- Featured Posts 
      {
      featuredPosts.length > 0 && (
        <>
          <section id="featured">
            <h2>Featured Posts</h2>
            <ul>
              {featuredPosts.map(({ data, slug }) => (
                <Card
                  href={`/posts/${slug}`}
                  frontmatter={data}
                  secHeading={false}
                />
              ))}
            </ul>
          </section>
          <Hr />
        </>
      )
    }
    -->
<!-- 
    <section id="recent-posts">
      <h2>üìù Recent Activity</h2>
      <ul>
        {
          sortedPosts
            //.filter(({ data }) => !data.featured)
            .filter(({ data }) => !data.nextSession)
            .filter(({ data }) => !data.nextFormal)
            .map(
              ({ data, slug }, index) =>
                index < 4 && (
                  <Card
                    href={`/posts/${slug}`}
                    frontmatter={data}
                    secHeading={false}
                  />
                )
            )
        }
      </ul> -->
      
      <section id="all-posts" class="hero-section">
      <div class="all-posts-btn-wrapper">
        <LinkButton href="/posts" className="all-posts-button">
          Our Posts
          <svg xmlns="http://www.w3.org/2000/svg"
            ><path
              d="m11.293 17.293 1.414 1.414L19.414 12l-6.707-6.707-1.414 1.414L15.586 11H6v2h9.586z"
            ></path>
          </svg>
        </LinkButton>
      </div>
    </section>
  </main>

  <Footer showIcons={false} />
</Layout>

<style>
  /* ===== Hero Section ===== */
  .hero-section {
    @apply pb-0 pt-0;
    max-width: 58rem;
  }
  
  .hero-content {
    @apply relative px-4;
    max-width: 100%;
    margin: 0;
    
    @media (min-width: 768px) {
      max-width: 58rem;
      margin-right: 35px;
      @apply px-0;
    }
  }
  
  .hero-content::after {
    content: "";
    display: table;
    clear: both;
  }
  
  .hero-text {
    @apply text-lg;
    font-family: 'Nunito', sans-serif;
    font-size: 25px;
    text-align: center;
    
    @media (min-width: 768px) {
      text-align: right;
    }
    line-height: 1.50rem;   
  }
  
  .subtitle-section {
    @apply block;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.5rem;
    line-height: 1.4; /* Tighter line height */
    font-size: 1.1rem; /* More controlled sizing */
    
    @media (min-width: 640px) {
      font-size: 1.25rem; /* Slightly larger on tablet */
    }
    
    @media (min-width: 768px) {
      justify-content: flex-end;
      font-size: 1.5rem; /* x-large equivalent on desktop */
    }
  }
  
  .subtitle-section.general-aspects {
    color: rgb(164 162 162); /* Slightly greyish text */
    margin-top: 1.5rem; /* Reduced from 2.5rem */
    margin-bottom: 0.75rem;
  }
  
  .subtitle-section.discussion-topics {
    color: rgb(115, 115, 115); /* Darker text for discussion topics */
    margin-top: 1rem; /* Reduced from 2rem */
    margin-bottom: 0.75rem;
  }
  
  .hero-title {
    @apply mb-6 font-bold leading-tight;
    font-family: 'Nunito', sans-serif;
    font-size: 2rem; /* 32px on mobile */
    line-height: 1.2;
    
    @media (min-width: 640px) {
      font-size: 2.5rem; /* 40px on tablet */
    }
    
    @media (min-width: 768px) {
      font-size: 3rem; /* 48px on desktop */
    }
  }

  .hero-tagline {
    @apply mt-8 mb-12;
    max-width: 40rem;
    margin-left: auto;
    margin-right: auto;
    text-align: center;
    position: relative;
  }

  .hero-tagline::before {
    content: '';
    position: absolute;
    top: -20px;
    left: 50%;
    transform: translateX(-50%);
    width: 22%;
    margin-top: -1rem;
    
    /* Wavy line CSS variables */
    --s: 6px; /* size of the wave */
    --b: 3px; /* thickness of the line */
    --m: 1; /* curvature of the wave [0 2] */
    
    /* Calculate dimensions */
    --R: calc(var(--s)*sqrt(var(--m)*var(--m) + 1) + var(--b)/2);
    height: calc(2*var(--R));
    
    /* Gradient background */
    background: linear-gradient(to right, rgba(255, 255, 255, 0.5) 5%, rgb(131, 130, 130) 50%, rgba(255, 255, 255, 0.5) 95%);
    
    /* Wavy mask */
    --_g: #0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%;
    mask:
      radial-gradient(var(--R) at left 50% bottom calc(-1*var(--m)*var(--s)), var(--_g)) 
       calc(50% - 2*var(--s)) calc(50% - var(--s)/2 - var(--b)/2)/calc(4*var(--s)) calc(var(--s) + var(--b)) repeat-x,
      radial-gradient(var(--R) at left 50% top calc(-1*var(--m)*var(--s)),var(--_g)) 
       50% calc(50% + var(--s)/2 + var(--b)/2)/calc(4*var(--s)) calc(var(--s) + var(--b)) repeat-x;
  }

  html[data-theme="light"] .hero-tagline::before {
    background: linear-gradient(to right, rgba(80, 80, 80, 0) 5%, rgb(143, 142, 142) 50%, rgba(80, 80, 80, 0) 95%);
  }

  html[data-theme="dark"] .hero-tagline::before {
    background: linear-gradient(to right, rgba(255, 255, 255, 0) 5%, rgba(255, 255, 255, 1)50%, rgba(255, 255, 255, 0) 95%);
  }

  .hero-tagline p {
    @apply text-skin-base;
    font-family: 'Nunito', sans-serif;
    font-size: 1.25rem;
    line-height: 1.4;
    font-weight: 200;
    margin-top: 2rem;
    /* font-style: italic; */
    opacity: 0.85;
    letter-spacing: 0.02em;
  }

  html[data-theme="light"] .hero-tagline p {
    color: rgb(75, 75, 75);
  }

  html[data-theme="dark"] .hero-tagline p {
    color: rgb(199, 199, 199);
  }

  .tagline-highlight {
    font-style: italic;
    color: rgb(var(--color-accent));
    font-weight: 700;
  }

  html[data-theme="light"] .tagline-highlight {
    color: #1a1a1a;
  }

  html[data-theme="dark"] .tagline-highlight {
    color: #ffffff;
  }
  
  
  .hero-text span {
    @apply whitespace-nowrap;
  }
/* 
  # cursor got inspiration from https://muffinman.io/blog/css-image-glitch/
  # thank you muffinman! */

  .glitch-container {
    @apply relative inline-block;
    /* overflow: hidden; */
    /* Touch-friendly sizing */
    min-height: 44px; /* iOS recommended minimum */
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.5rem;
    font-size: 0.9rem;
    
    @media (min-width: 640px) {
      font-size: 1rem;
    }
  }

    .glitch-container.glitch-active {
      animation: glitch-container 2s steps(1, end);
      color: transparent;
    }

    .glitch-strip {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      overflow: hidden;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      text-rendering: optimizeSpeed;
      font-smooth: never;
      outline: none;
      border: none;
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }


  /* Generate multiple glitch animations with stronger chromatic aberration */
  @keyframes glitch-text-strip {
    0% {
      transform: none;
      filter: hue-rotate(0);
      color: var(--glitch-text-color);
    }
    15% {
      color: transparent;
    }
    35% {
      color: var(--glitch-text-color);
    }
    55% {
      color: transparent;
    }
    85% {
      color: var(--glitch-text-color);
    }
    95% {
      color: transparent;
    }
  }
  
  @keyframes glitch-red-blue {
    0%,  100% {
      transform: none;
      filter: hue-rotate(0);
      color: transparent;
    }
    15% {
      transform: translateX(var(--glitch-x-1));
      text-shadow: 1px 2px 0 rgba(255, 0, 0, 0.387), -1px -2px 0 rgba(0, 30, 255, 0.389);
      color: transparent;
    }
    65% {
      transform: translateX(var(--glitch-x-2));
      text-shadow: -2px 1px 0 rgba(255, 0, 0, 0.611), 2px -1px 0 rgba(0, 30, 255, 0.72);
      color: transparent;
    }
  }
/*   
  @keyframes glitch-3 {
    0%,    40%, 90% {
      transform: none;
      filter: hue-rotate(0);
      color: transparent;
    }
    20% {
      transform: translateX(var(--glitch-x-1));
      text-shadow: 3px 1px 0 rgba(13, 0, 255, 0.354), -3px -1px 0 rgba(0, 195, 255, 0.5);
      color: transparent;
    }
    70%, {
      transform: translateX(var(--glitch-x-2));
      text-shadow: -1px 3px 0 rgba(0, 60, 255, 0.365), 1px -3px 0 rgba(0, 204, 255, 0.365);
      color: transparent;
    }
  } */

  @keyframes glitch-pink-yellow {
    0%,     95% {
      transform: none;
      filter: hue-rotate(0);
      color: transparent;
    }
    35%{
      transform: translateX(var(--glitch-x-1));
      text-shadow: 3px 1px 0 rgba(255, 0, 162, 0.354), -3px -1px 0 rgba(200, 255, 0, 0.5);
      color: transparent;
    }
    90% {
      transform: translateX(var(--glitch-x-1));
      text-shadow: 3px 1px 0 rgba(255, 0, 162, 0.663), -3px -1px 0 rgba(200, 255, 0, 0.861);
      color: transparent;
    }
  }

  @keyframes glitch-text-hole {
    0%,     95% {
      transform: none;
      filter: hue-rotate(0);
      color: transparent;
    }
    25%, 90% {
      transform: translateX(var(--glitch-x-1));
      text-shadow: 3px 1px 0 rgba(12, 12, 12, 0.354), -3px -1px 0 rgba(0, 0, 0, 0.5);
      color: transparent;
    }
  }

  .dot {
    @apply text-skin-accent font-bold;
    font-size: 2em; /* Make dots twice as large */
    vertical-align: middle;
    margin-bottom: 10px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }
  
  .hero-graphic {
    @apply flex justify-center lg:flex-shrink-0;
  }
  
  .logo-container {
    @apply relative;
    /* Mobile-first: center the logo */
    float: none;
    margin: 0 auto 2rem auto;
    text-align: center;
    
    /* Desktop layout */
    @media (min-width: 768px) {
      float: right;
      margin-left: 4rem;
      margin-bottom: 1rem;
      margin-top: -2rem;
      text-align: left;
    }
    /* defines circular wrap around the logo which is also circular */
    shape-outside: circle(50% at 50% 45%);
    clip-path: circle(50%);
  }
  
  /* Hero ring logo styling */
  .hero-ring-logo {
    @apply absolute w-auto transition-opacity duration-200;
    opacity: 0.3;
    pointer-events: none;
    top: 0;
    left: 0;
    z-index: -1;
    animation: slowRotate 150s linear infinite;
    
    /* Responsive sizing for ring logos */
    height: 14rem; /* Mobile */
    
    @media (min-width: 640px) {
      height: 18rem; /* Tablet */
    }
    
    @media (min-width: 768px) {
      height: 22rem; /* Desktop */
    }
    
    @media (min-width: 1024px) {
      height: 28rem; /* Large desktop */
    }
  }
  
  .hero-ring-logo.light-ring {
    display: block;
  }
  
  .hero-ring-logo.dark-ring {
    display: none;
  }
  
  html[data-theme="dark"] .hero-ring-logo.light-ring {
    display: none;
  }
  
  html[data-theme="dark"] .hero-ring-logo.dark-ring {
    display: block;
  }
  
  @keyframes slowRotate {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
  
  #hero{
    margin-top: 70px;
    margin-bottom: 70px;
    max-height: 100vw;
    margin-left: auto;
    margin-right: auto;
  }

  
  .hero-logo {
    @apply w-auto transition-opacity duration-200;
    height: 12rem; /* 192px on mobile */
    
    @media (min-width: 640px) {
      height: 16rem; /* 256px on tablet */
    }
    
    @media (min-width: 768px) {
      height: 20rem; /* 320px on desktop */
    }
    
    @media (min-width: 1024px) {
      height: 25rem; /* 400px on large desktop */
    }
  }
  
  .light-logo {
    @apply block;
  }
  
  .dark-logo {
    @apply hidden;
  }
  
  /* Dark mode logo switching */
  html[data-theme="dark"] .light-logo {
    @apply hidden;
  }
  
  html[data-theme="dark"] .dark-logo {
    @apply block;
  }

  /* ===== Featured & Recent Posts Sections ===== */
  #featured,
  #recent-posts {
    @apply pb-0;
    max-width: 58rem;
    margin-top: -40px;
    
  }

  #featured h2,
  #recent-posts h2 {
    @apply text-4xl font-semibold tracking-wide;
  }
  .all-posts-btn-wrapper {
    @apply my-8 text-center;
    margin-top: 0px;
    margin-bottom: 0px;
    max-width: 58rem;
    font-size: 1.5rem;
    
  }

  .all-posts-button {
    text-decoration: underline;
    text-underline-offset: 0.3em;
    /* Touch-friendly button sizing */
    @apply px-6 py-3;
    min-height: 44px;
    
    @media (min-width: 768px) {
      @apply px-8 py-4;
    }
  }

  #all-posts {

    padding-bottom: 20px;
    margin-top: -20px;
  }

  /* Section header line */
  .section-header-line {
    @apply h-px bg-skin-inverted;
    width: 52%;
    float: left;
    height: 3px;
    margin: 10px auto 20px auto;
  }
</style>

<script>
  // CSS-only glitch effect implementation based on muffinman.io
  function random(min, max) {
    return Math.random() * (max - min) + min;
  }

  function generateGlitchStrips(container) {


    var glitch_names = [
      'glitch-text-strip',
      'glitch-red-blue',
      'glitch-pink-yellow',
      'glitch-text-hole',
    ];

    const text = container.getAttribute('data-text');
    const textElement = container.querySelector('span');
    
    // Get computed styles to determine height
    const computedStyle = window.getComputedStyle(textElement);
    const fontSize = parseFloat(computedStyle.fontSize);
    const lineHeight = parseFloat(computedStyle.lineHeight) || fontSize * 1.2;
    const textColor = computedStyle.color;
    // Generate movement values once per glitch type (shared across all strips of same type)
    const glitchTypeValues = {};
    glitch_names.forEach(glitchType => {
      if (glitchType == 'glitch-text-strip' || glitchType == 'glitch-text-hole') {
        glitchTypeValues[glitchType] = { x1: 0, x2: 0 };
      } else if (glitchType == 'glitch-red-blue') {
        glitchTypeValues[glitchType] = { x1: random(-15, -10), x2: random(-10, -5) };
      } else if (glitchType == 'glitch-pink-yellow') {
        glitchTypeValues[glitchType] = { x1: random(0, 5), x2: random(5, 10) };
      }
    });
    
    // Create strips
    const strips = [];
    let currentTop = 0;
    
    while (currentTop < lineHeight) {
      // Calculate remaining height
      const remainingHeight = lineHeight - currentTop;
      
      let actualHeight;
      // For the last strip, use all remaining height
      if (remainingHeight <= lineHeight * 0.1) { // If less than 10% remaining
        actualHeight = remainingHeight;
      } else {
        // Calculate strip height as percentage of remaining height (10% to 40% of remaining)
        const stripHeightPercent = random(20, 40); // Percentage of remaining height
        const stripHeight = (remainingHeight * stripHeightPercent) / 100;
        actualHeight = stripHeight;
      }
      
       // Get theme background color for initial strip color
       const isDarkMode = document.documentElement.getAttribute('data-theme') === 'dark';
       const backgroundColor = isDarkMode ? '#0f0f0f' : '#ffffff';
       
       const strip = document.createElement('div');
       strip.className = 'glitch-strip';

       // Choose random glitch type for this strip
       var glitch_name = glitch_names[Math.floor(Math.random() * glitch_names.length)];
       
       // Use pre-generated values for this glitch type
       var glitch_x_1 = glitchTypeValues[glitch_name].x1;
       var glitch_x_2 = glitchTypeValues[glitch_name].x2;
       var timing_function = 'steps(1, end)';
       strip.style.cssText = `
         position: absolute;
         top: ${currentTop}px;
         left: 0;
         right: 0;
         height: ${actualHeight}px;
         background: inherit;
         color: inherit;
         font-size: inherit;
         font-family: inherit;
         font-weight: inherit;
         overflow: hidden;
         outline: none;
         border: none;
         -webkit-font-smoothing: antialiased;
         -moz-osx-font-smoothing: grayscale;
         text-rendering: optimizeSpeed;
         --glitch-x-1: ${glitch_x_1}px;
         --glitch-x-2: ${glitch_x_2}px;
         --glitch-text-color: ${textColor};
         --glitch-hue-1: ${random(10, 20)}deg;
         animation-name: ${glitch_name};
         animation-duration: ${random(1000, 3000)}ms;
        //  animation-delay: ${random(0, 2000)}ms;
         animation-iteration-count: infinite;
         animation-play-state: paused;
          animation-timing-function: ${timing_function};
       `;
      
      // Create a span with the text and position it to show only the relevant slice
      const textSpan = document.createElement('span');
      textSpan.textContent = text;
      textSpan.style.cssText = `
        position: absolute;
        top: -${currentTop}px;
        left: 0;
        line-height: inherit;
        font-size: inherit;
        font-family: inherit;
        font-weight: inherit;
        letter-spacing: inherit;
        word-spacing: inherit;
        text-transform: inherit;
        -webkit-font-smoothing: inherit;
        -moz-osx-font-smoothing: inherit;
        text-rendering: inherit;
      `;
      strip.appendChild(textSpan);
      strips.push(strip);
      currentTop += actualHeight;
    }
    
    return strips;
  }

  function triggerGlitchEffect() {
    const containers = document.querySelectorAll('.glitch-container');
    
    if (containers.length > 0) {
      // Randomly select 1-3 containers
      const numContainers = Math.floor(Math.random() * 3) + 1; // 1, 2, or 3
      const selectedContainers = [];
      
      // Create a copy of containers array and shuffle it
      const availableContainers = Array.from(containers);
      for (let i = availableContainers.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [availableContainers[i], availableContainers[j]] = [availableContainers[j], availableContainers[i]];
      }
      
      // Select the first numContainers
      for (let i = 0; i < numContainers && i < availableContainers.length; i++) {
        selectedContainers.push(availableContainers[i]);
      }
      
      // Apply glitch effect to each selected container with staggered delays
      selectedContainers.forEach((container, index) => {
        // Calculate staggered delay (0-1000ms spread across containers)
        const delay = (index * 1000) / selectedContainers.length;
        
        setTimeout(() => {
          // Clear existing strips
          container.querySelectorAll('.glitch-strip').forEach(strip => strip.remove());
          
          // Generate new strips
          const strips = generateGlitchStrips(container);
          
          // Add strips to container
          strips.forEach(strip => {
            container.appendChild(strip);
          });
          
          // Set container movement variable
          const containerMovementx1 = random(-20, 30);
          const containerMovementx2 = random(-50, -20);
          const containerMovementy1 = random(-2, 2);
          const containerMovementy2 = random(-2, 2);
          container.style.setProperty('--glitch-container-x-1', `${containerMovementx1}px`);
          container.style.setProperty('--glitch-container-x-2', `${containerMovementx2}px`);
          container.style.setProperty('--glitch-container-y-1', `${containerMovementy1}px`);
          container.style.setProperty('--glitch-container-y-2', `${containerMovementy2}px`);
          
          // Trigger glitch animation
          container.classList.add('glitch-active');
          
          // Start strip animations
          strips.forEach(strip => {
            strip.style.animationPlayState = 'running';
          });
          
          // Clean up after animation (2 seconds after this container starts)
          setTimeout(() => {
            container.classList.remove('glitch-active');
            strips.forEach(strip => {
              strip.style.animationPlayState = 'paused';
              strip.remove();
            });
          }, 2000);
        }, delay);
      });
    }
  }

  let glitchTimeout = null;

  function scheduleGlitchEffect() {
    // Clear any existing timeout to prevent multiple loops
    if (glitchTimeout) {
      clearTimeout(glitchTimeout);
    }
  
    const minDelay = 18000;  // 18 seconds
    const maxDelay = 22000;  // 22 seconds
    const delay = Math.random() * (maxDelay - minDelay) + minDelay;
    
    glitchTimeout = setTimeout(() => {
      triggerGlitchEffect();
      scheduleGlitchEffect();
    }, delay);
  }

  // Initialize glitch effect
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(scheduleGlitchEffect, 0);
  });

  // Re-setup on view transitions
  document.addEventListener('astro:after-swap', () => {
    scheduleGlitchEffect();
  });
</script>
