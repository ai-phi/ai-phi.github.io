---
import { SITE } from "@config";
import Breadcrumbs from "@components/Breadcrumbs.astro";
import Footer from "@components/Footer.astro";
import Header from "@components/Header.astro";
import Layout from "../../layouts/Layout.astro";
import PDFViewer from '../../components/PDFViewer.astro';
import Pagination from '../../components/Pagination.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  // Get all blog posts
  const allPosts = await getCollection('blog');
  
  // Filter posts that contain PDF comments
  const postsWithPDFs = allPosts.filter(post => {
    return post.body.includes('<!-- PDF:') && post.body.includes('.pdf');
  });
  
  // Extract presentation data from posts
  const presentations = postsWithPDFs.flatMap(post => {
    const pdfRegex = /<!--\s*PDF:\s*([^|]+?)(?:\s*\|\s*title:\s*([^|]+?))?(?:\s*\|\s*type:\s*([^|]+?))?\s*-->/g;
    const pdfMatches = [...post.body.matchAll(pdfRegex)];
    
    if (pdfMatches.length === 0) return [];
    
    return pdfMatches.map((pdfMatch, index) => {
      const filename = pdfMatch[1].trim();
      const title = pdfMatch[2] ? pdfMatch[2].trim() : null;
      const type = pdfMatch[3] ? pdfMatch[3].trim() : 'seminar';
      const pdfPath = `/pdfs/${filename}`;
      const pdfTitle = title || post.data.title;
      
      return {
        title: pdfTitle,
        pdfPath: pdfPath,
        postTitle: post.data.title,
        postSlug: post.slug,
        pubDatetime: post.data.pubDatetime,
        description: post.data.description,
        type: type
      };
    });
  }).filter(presentation => presentation.pdfPath);
  
  // Calculate total pages
  const POSTS_PER_PAGE = 3;
  const totalPages = Math.ceil(presentations.length / POSTS_PER_PAGE);
  
  // Generate paths for all pages
  const paths = [];
  
  // Pages 2, 3, etc. (page 1 is handled by index.astro)
  for (let i = 2; i <= totalPages; i++) {
    paths.push({
      params: { page: String(i) },
      props: { page: i }
    });
  }
  
  return paths;
}

const pageTitle = "Resources";
const pageDescription = "AI-Phi resources and documents.";

// Pagination parameters
const POSTS_PER_PAGE = 3;

// Get page from URL params (for static routes like /resources/1, /resources/2)
const { page } = Astro.params;
const currentPage = page && !isNaN(Number(page)) ? Number(page) : 1;

// Get all blog posts
const allPosts = await getCollection('blog');

// Filter posts that contain PDF comments
const postsWithPDFs = allPosts.filter(post => {
  // Check if the post content contains PDF comments
  return post.body.includes('<!-- PDF:') && post.body.includes('.pdf');
});

// Extract presentation data from posts
const presentations = postsWithPDFs.flatMap(post => {
  // Extract ALL PDF comments using the new format
  const pdfRegex = /<!--\s*PDF:\s*([^|]+?)(?:\s*\|\s*title:\s*([^|]+?))?(?:\s*\|\s*type:\s*([^|]+?))?\s*-->/g;
  const pdfMatches = [...post.body.matchAll(pdfRegex)];
  
  // If no PDFs found, return empty array
  if (pdfMatches.length === 0) return [];
  
  // Create a presentation entry for each PDF found
  return pdfMatches.map((pdfMatch, index) => {
    const filename = pdfMatch[1].trim();
    const title = pdfMatch[2] ? pdfMatch[2].trim() : null;
    const type = pdfMatch[3] ? pdfMatch[3].trim() : 'seminar';
    const pdfPath = `/pdfs/${filename}`;
    
    // Use the title from the comment or fallback to post title
    const pdfTitle = title || post.data.title;
    
    return {
      title: pdfTitle,
      pdfPath: pdfPath,
      postTitle: post.data.title,
      postSlug: post.slug,
      pubDatetime: post.data.pubDatetime,
      description: post.data.description,
      type: type
    };
  });
}).filter(presentation => presentation.pdfPath); // Only include if we found a PDF path

// Sort presentations by date (newest first)
presentations.sort((a, b) => new Date(b.pubDatetime).getTime() - new Date(a.pubDatetime).getTime());

// Pagination logic
const totalPages = Math.ceil(presentations.length / POSTS_PER_PAGE);
const startIndex = (currentPage - 1) * POSTS_PER_PAGE;
const endIndex = startIndex + POSTS_PER_PAGE;
const paginatedPresentations = presentations.slice(startIndex, endIndex);
---

<Layout title={`${pageTitle} | ${SITE.title}`} description={pageDescription} data-astro-reload>
  <Header activeNav="resources" />
  <Breadcrumbs />
  <main id="main-content" class="@container">
    <h1>{pageTitle}</h1>
    <p>{pageDescription}</p>
    
    <div class="resources-content">
      
      <section class="mb-12">
        <h2 class="section-title">Presentations</h2>
        <p class="section-description">
          Slides and presentation materials from our sessions. Some presentations were preceded by a preamble containing news and updates which are also included.
        </p>
        
        {paginatedPresentations.length > 0 ? (
          <div class="presentations-list">
            {paginatedPresentations.map((presentation) => (
              <div class="presentation-card">
                <div class="presentation-title">
                  <h3>{presentation.title}</h3>
                </div>
                <PDFViewer 
                  src={presentation.pdfPath} 
                  height="380px"
                />
                <div class="presentation-footer">
                  <div class="presentation-info">
                    <div class="presentation-date">{presentation.pubDatetime.toLocaleDateString('en-US', { 
                      year: 'numeric', 
                      month: 'long', 
                      day: 'numeric' 
                    })}</div>
                    <div class="presentation-source">
                      <a href={`/posts/${presentation.postSlug}`} class="text-skin-accent hover:underline">
                        From: {presentation.postTitle}
                      </a>
                    </div>
                  </div>
                  <div class="presentation-download">
                    <a href={presentation.pdfPath} download class="download-btn">
                      ðŸ“„ Download PDF
                    </a>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div class="pdf-placeholder">
            <p class="text-skin-base opacity-70">
              ðŸ“„ No presentations found. Presentations will appear here when PDFs are attached to blog posts.
            </p>
          </div>
        )}
        
        {totalPages > 1 && (
          <div class="pagination-wrapper">
            
            <Pagination 
              currentPage={currentPage} 
              totalPages={totalPages} 
              prevUrl={currentPage > 1 ? (currentPage - 1 === 1 ? '/resources' : `/resources/${currentPage - 1}`) : '/resources'}
              nextUrl={currentPage < totalPages ? `/resources/${currentPage + 1}` : '/resources'}
              firstUrl={totalPages > 4 ? '/resources' : undefined}
              lastUrl={totalPages > 4 ? `/resources/${totalPages}` : undefined}
            />
          </div>
         )}
       </section>
     </div>
   </main>
  <Footer />
</Layout>

<style>
  #main-content {
    @apply mx-auto w-full max-w-3xl px-4 pb-4;
  }
  
  #main-content h1 {
    @apply text-2xl font-semibold sm:text-3xl;
  }
  
  #main-content p {
    @apply mb-6 mt-2 italic;
  }
  
  .resources-content {
    @apply space-y-8;
    padding: 20px;
  }
  
  .section-title {
    @apply text-2xl font-semibold text-skin-accent mb-3;
  }
  
  .section-description {
    @apply text-skin-base opacity-70 mb-6;
  }
  
  .pdf-placeholder {
    @apply p-8 border-2 border-dashed border-skin-line rounded-lg text-center;
  }
  
  .presentations-list {
    @apply space-y-0;
  }
  
  .presentation-card {
    background-color: rgb(20 20 20 / 79%);
    border-radius: 0.9rem;
    margin-top: 0rem;
    margin-bottom: 1rem !important;
  }

  .presentation-title {
    padding-left: 1rem;
    padding-right: 1rem;
    padding-top: 0.4rem;
  }

  .presentation-title h3 {
    @apply text-skin-base mb-0;
    font-style: italic;
    font-weight: 200;
    font-size: 16px;
  }
  
  
  .presentation-card:last-child {
    margin-bottom: 0rem !important;
  }
  
  .presentation-footer {
    @apply flex justify-between items-center p-4 text-sm text-skin-base opacity-70;
  }
  
  .presentation-info {
    @apply flex flex-col;
  }
  
  .presentation-date {
    @apply font-medium mb-1;
  }
  
  .presentation-source {
    @apply text-xs;
  }
  
  .presentation-download {
    @apply flex-shrink-0;
  }
  
  .download-btn {
    @apply inline-flex items-center px-3 py-1 bg-transparent text-skin-accent rounded-md transition-colors text-sm no-underline;
  }
  
  .download-btn:hover {
    background-color: rgb(var(--color-accent)) !important;
    color: white !important;
    opacity: 1 !important;
  }
  
  /* Override prose hover styles for download button */
  .prose .download-btn:hover {
    background-color: rgb(var(--color-accent)) !important;
    color: white !important;
    opacity: 1 !important;
    text-decoration: none !important;
  }
  
  .pagination-wrapper {
    @apply mt-8 flex justify-center;
  }
</style>
